name: RepoCheckin

# ----- workflow runs for Pushed on any branch but main and any branch PR when opened.
on:
  push:
    branches:
      - '**'
      - '!main'
  
  pull_request:
    branches:
      - '**'
    type: [open]

  workflow_dispatch:

jobs:

# ------ This job runs unit tests.
# ----- Only runs if the commit message doesn't have skip ci in it.  This is so 'internal' commits don't trigger unit testing.  It will also not run if the Head_commit (I believe this ist
# ----- the previous commit) message does not contain Merge.  This is so a PR commit message (which begins with Merge) doesn't kick off the unit test.
  unittest:
    name: Unit Test but only if not push to branch
   # if: "((github.ref != 'refs/heads/main') || (github.event_name == 'pull_request')) && !contains(github.event.commits[0].message, '[skip ci]')"
    if: "!contains(github.event.commits[0].message, '[skip ci]') || !contains(github.event.head_commit.message, '[Merge]')"
    runs-on: ubuntu-latest
    steps:
      # ----- checkout repo
      - uses: actions/checkout@v2

      # ----- used during troubleshooting.  echos various info.  Should not be there in a production workflow
      - name: Verbose
        run: |
          echo "Branch = ${{github.ref}}"
          echo "PR Base Ref = ${{github.event.pull_request.base.ref}}"
          echo "event name = ${{github.event_name}}"
          echo "base ref = ${{github.base_ref}}"
          echo "sha = ${{github.sha}}"
          echo "commit message[0] = ${{github.event.commits[0].message}}"
          echo "pusher = ${{github.event.pusher.name}}"
          echo "sender = ${{github.event.sender.login}}"
          echo "actor = ${{github.actor}}"
          echo "HeadCommit = ${{github.event.head_commit.message}}"

      # ----- used during troubleshooting.  echos various info.  Should not be there in a production workflow
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: |
      #     echo "$GITHUB_CONTEXT"

      # ----- This is where the tests are run.  In most of my repos this will be powershell or pester tests.  other languages would use other tests
      - name: Pester Tests
        shell: pwsh
        run: |
          # Setting the powershellgallery as a trusted gallery
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-module Pester -Force
          # and becuase of the required module bug.  ImportExcel needs to be installed.
          Install-Module ImportExcel -Force
          Invoke-Pester -Passthru | Export-CliXml -Path Unit.Tests.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-Unit-Tests
          path: Unit.Tests.xml  

# ----- Updates the version
  UpdateModuleVersion:
    name: Updates version and returns it
    needs: unittest
    if: success() && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2  

      # ----- reads the version.  Again in my repos most of the time it will be a powershell module ( But it would be just as easy to use a json file or from readme.md )
      - name: GetVer PS
        id: GetVer
        shell: pwsh
        run: |
          $ModuleManifest = Get-Content "$($env:GITHUB_REPOSITORY.tolower().split('/')[1]).psd1"
          $Ver = ($ModuleManifest | Select-String -Pattern "ModuleVersion = '(.*)'").matches.groups[1].value
          Write-Output "::set-output name=version::$Ver"
          Write-Output "::set-output name=versiontype::modulemanifest"

      # ----- Increment version
      - name: IncreaseVersion
        id: IncreaseVer
        shell: bash
        run: |
            CurVer=${{ steps.GetVer.outputs.version }}
            IFS='.'
            read -a SplitVer <<<"$CurVer"
            Major=$((SplitVer[0]))
            Minor=$((SplitVer[1]))
            Build="$((SplitVer[2] + 1))"
            NewVer="$Major.$Minor.$Build"
            unset IFS
            echo "::set-output name=version::$NewVer"
         
      - name: Show Version
        run: |
          echo "NewVer = ${{ steps.IncreaseVer.outputs.version }}"

      # ----- update the manifest file ( or json )
      - name: UpdateVersion
        shell: pwsh
        run: |
          # Setting the powershellgallery as a trusted gallery
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          # and becuase of the required module bug.  ImportExcel needs to be installed.
          Install-Module ImportExcel -Force
          Update-ModuleManifest -Path ".\$($env:GITHUB_REPOSITORY.tolower().split('/')[1]).psd1" -ModuleVersion ${{steps.increaseVer.outputs.version}}
                   
      # ----- readme.md in github has a badge that displays the version number.           
      - name: UpdateReadmeVersionBadge
        shell: pwsh
        run: |
          $Readme = Get-Content 'README.md'
          $Readme =  $Readme -replace "Version-\d+\.\d+\.\d+-brightgreen", "Version-${{ steps.IncreaseVer.outputs.version }}-brightgreen"
          $Readme | set-content 'README.md'

      # ----- save changes back to repo   
      - name: Commit
        if: ${{ success() }}
        run: |
          git status
          git config --global user.name 'github actions'      
          git config --global user.email 'actions@github.com'
          git ls-files --others --exclude-standard
          git commit -am "skip ci - Commit Updated Version Files in Repo to: ${{steps.IncreaseVer.outputs.version}}"
          git push

# ----- if the workflow was triggered by a PR and the unit test failed.  Close the PR without Merging
  FailedPRPesterTest:
    name: Close PR after failed tests
    needs: unittest
    if: failure() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: PR info
        run: echo "PR number = ${{ github.event.number }}"
    
      - name: Close Pull
        run: |
          echo ${{secrets.GITHUB_TOKEN}} >> token.txt
          gh auth login --with-token < token.txt
          gh pr close ${{ github.event.number }}

  # DoNotPushtoMAIN:
  #   name: Do not push to MAIN branch
  #   if: "github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && !contains(github.event.commits[0].message, '[skip ci]')"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: do not push to main
  #       run: echo "MAIN Branch -- Do not push directly to main.  Push to a different branch and submit a Pull Request to Main."

  #     - name: Verbose
  #       run: |
  #         echo "Branch = ${{github.ref}}"
  #         echo "event name = ${{github.event_name}}"
  #         echo "commit message[0] = ${{github.event.commits[0].message}}"
  #         echo "commit message = ${{github.event.commits.message}}"
  #         echo "actor = ${{github.actor}}"

  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 3

  #     - name: Reset Push to previous Commit
  #       shell: pwsh
  #       run: |
  #         $Message = git log main --all --oneline -n 1 --format=%B

  #         Write-Output "==========="

  #         if ( $Message -like "Merge*" ) {
  #           Write-Output "Allowing Push" 
  #         }
  #         else {
  #           Write-Output "Resetting MAIN to remove this push." 

  #           git config --global user.name 'github actions'      
  #           git config --global user.email 'actions@github.com'

  #           git reset --hard HEAD~1
  #           # git commit -m 'skip ci - reset push direct to main branch.'
  #           git push
  #         }

