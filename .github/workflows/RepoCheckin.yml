name: RepoCheckin

on:
  push:
    branches:
      - '**'

jobs:
  unittest:
    name: Unit Test but only if not push to branch
    if: "((github.ref != 'refs/heads/main') || (github.ref == 'refs/heads/main' && github.actor == 'github actions') || (github.event_name == 'pull_request')) && !contains(github.event.commits[0].message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Display branch
        run: echo "Branch = $GITHUB_REF"

      - name: Display Actor
        run: echo "actor = $GITHUB_ACTOR"

      - name: Pester Tests
        shell: pwsh
        run: Invoke-Pester -Passthru | Export-CliXml -Path Unit.Tests.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-Unit-Tests
          path: Unit.Tests.xml  

  UpdateModuleVersion:
    name: Updates version and returns it
    needs: unittest
    if: success() && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2  

      - name: GetVer PS
        id: GetVer
        shell: pwsh
        run: |
          $ModuleManifest = Get-Content "$($env:GITHUB_REPOSITORY.tolower().split('/')[1]).psd1"
          $Ver = ($ModuleManifest | Select-String -Pattern "ModuleVersion = '(.*)'").matches.groups[1].value
          Write-Output "::set-output name=version::$Ver"
          Write-Output "::set-output name=versiontype::modulemanifest"

      - name: IncreaseVersion
        id: IncreaseVer
        shell: bash
        run: |
            CurVer=${{ steps.GetVer.outputs.version }}
            IFS='.'
            read -a SplitVer <<<"$CurVer"
            Major=$((SplitVer[0]))
            Minor=$((SplitVer[1]))
            Build="$((SplitVer[2] + 1))"
            NewVer="$Major.$Minor.$Build"
            unset IFS
            echo "::set-output name=version::$NewVer"
         
      - name: Show Version
        run: |
          echo "NewVer = ${{ steps.IncreaseVer.outputs.version }}"

      - name: UpdateVersion
        shell: pwsh
        run: |
          Update-ModuleManifest -Path ".\$($env:GITHUB_REPOSITORY.tolower().split('/')[1]).psd1" -ModuleVersion ${{steps.increaseVer.outputs.version}}
                    
      - name: UpdateReadmeVersionBadge
        uses: jeffbuenting/UpdateCustomBadge@jeffbuenting-patch-1
        with:
          filename: 'README.md'
          label: 'Version'
          message: ${{ steps.IncreaseVer.outputs.version }}
          
      - name: Commit
        if: ${{ success() }}
        run: |
          git status
          git config --global user.name 'github actions'      
          git config --global user.email 'actions@github.com'
          git ls-files --others --exclude-standard
          git commit -am "skip ci - Commit Updated Version Files in Repo to: ${{steps.IncreaseVer.outputs.version}}"
          git push


  DoNotPushtoMAIN:
    name: Do not push to MAIN branch
    if: "github.ref == 'refs/heads/main' && github.actor != 'github actions' "
    runs-on: ubuntu-latest
    steps:
      - name: Display branch
        run: echo "Branch = $GITHUB_REF"

      - name: Display Actor
        run: echo "actor = $GITHUB_ACTOR"

      - name: do not push to main
        run: echo "MAIN Branch -- Do not push directly to main.  Push to a different branch and submit a Pull Request to Main."

      - uses: actions/checkout@v2
        with:
          fetch-depth: 3

      - name: Reset Push to previous Commit
        run: |
          echo "Resetting MAIN to remove this push."

          git log --oneline 
          git config --global user.name 'github actions'      
          git config --global user.email 'actions@github.com'

          git reset --hard HEAD~1
          git push --force